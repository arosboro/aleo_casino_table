// The 'aleo_casino_table' program.
program aleo_casino_table.aleo {

    record CasinoTable {
        owner: address,
        gates: u64,
        seats: u8,
        seats_occupied: u8,
        seats_ready: u8,
        dealer: address,
        player: address,
        random_seed_hash: field,
        random_seed: u64,
    }

    mapping table_count: address => u64;

    transition main(random_seed: u64, p01: address, p02: address, p03: address, p04: address, p05: address, p06: address, p07: address) -> (CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable) {
        let burn_address: address = aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;
        let random_seed_hash: field = Poseidon8::hash(random_seed);
        let seats: u8 = 1u8;
        if p01 != burn_address {
            seats += 1u8;
        }
        if p02 != burn_address {
            seats += 1u8;
        }
        if p03 != burn_address {
            seats += 1u8;
        }
        if p04 != burn_address {
            seats += 1u8;
        }
        if p05 != burn_address {
            seats += 1u8;
        }
        if p06 != burn_address {
            seats += 1u8;
        }
        if p07 != burn_address {
            seats += 1u8;
        }

        return (CasinoTable {
            owner: self.caller,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: self.caller,
            random_seed_hash,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p01,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p01,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p02,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p02,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p03,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p03,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p04,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p04,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p05,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p05,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p06,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p06,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }, CasinoTable {
            owner: p07,
            gates: 0u64,
            seats,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: p07,
            random_seed_hash: 0field,
            random_seed: 0u64,
        }) then finalize(self.caller, p01, p02, p03, p04, p05, p06, p07);
    }

    finalize main(p00: address, p01: address, p02: address, p03: address, p04: address, p05: address, p06: address, p07: address) {
        assert(p00 == self.caller);
        let burn_address: address = aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;
        if p00 != burn_address {
            increment(table_count, p00, 1u64);
        }
        if p01 != burn_address {
            increment(table_count, p01, 1u64);
        }
        if p02 != burn_address {
            increment(table_count, p02, 1u64);
        }
        if p03 != burn_address {
            increment(table_count, p03, 1u64);
        }
        if p04 != burn_address {
            increment(table_count, p04, 1u64);
        }
        if p05 != burn_address {
            increment(table_count, p05, 1u64);
        }
        if p06 != burn_address {
            increment(table_count, p06, 1u64);
        }
        if p07 != burn_address {
            increment(table_count, p07, 1u64);
        }
    }

    transition sit(table: CasinoTable, random_seed: u64) -> public CasinoTable {
        let random_seed_hash: field = Poseidon8::hash(random_seed);
        assert(table.seats_occupied < table.seats);
        assert(table.owner == self.caller && table.player == self.caller);
        return CasinoTable {
            owner: self.caller,
            gates: table.gates,
            seats: table.seats,
            seats_occupied: table.seats_occupied,
            seats_ready: table.seats_ready,
            dealer: table.dealer,
            player: table.player,
            random_seed_hash,
            random_seed: 0u64,
        };
    }

    transition ready(table: CasinoTable, random_seed: u64) -> (CasinoTable, CasinoTable, public CasinoTable) {
        let random_seed_hash: field = Poseidon8::hash(random_seed);
        assert(table.owner == self.caller);
        assert(table.random_seed_hash == random_seed_hash);

        return (CasinoTable {
            owner: self.caller,
            gates: 0u64,
            seats: table.seats,
            seats_occupied: table.seats_occupied,
            seats_ready: table.seats_ready,
            dealer: table.dealer,
            player: table.player,
            random_seed_hash: table.random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: aleo1s2hkr9nw7vp2vrlfzewwluqqfg8pfykcffm9gx90qmhk8vrj7urqum9yqn,
            gates: 0u64,
            seats: table.seats,
            seats_occupied: table.seats_occupied,
            seats_ready: table.seats_ready,
            dealer: table.dealer,
            player: table.player,
            random_seed_hash: table.random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: table.dealer,
            gates: 0u64,
            seats: table.seats,
            seats_occupied: table.seats_occupied,
            seats_ready: table.seats_ready,
            dealer: table.dealer,
            player: table.player,
            random_seed_hash: table.random_seed_hash,
            random_seed,
        });
    }

    transition fill_empty_seat() -> CasinoTable {
        let burn_address: address = aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;
        return CasinoTable {
            owner: self.caller,
            gates: 0u64,
            seats: 0u8,
            seats_occupied: 0u8,
            seats_ready: 0u8,
            dealer: self.caller,
            player: burn_address,
            random_seed_hash: 0field,
            random_seed: 0u64,
        };
    }

    transition claim(p00: CasinoTable, p01: CasinoTable, p02: CasinoTable, p03: CasinoTable, p04: CasinoTable, p05: CasinoTable, p06: CasinoTable, p07: CasinoTable) -> (CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable, CasinoTable) {
        assert(p00.owner == self.caller);
        assert(p01.owner == self.caller);
        assert(p02.owner == self.caller);
        assert(p03.owner == self.caller);
        assert(p04.owner == self.caller);
        assert(p05.owner == self.caller);
        assert(p06.owner == self.caller);
        assert(p07.owner == self.caller);
        assert(p00.player == self.caller);
        assert(p00.dealer == self.caller);
        assert(p01.dealer == self.caller);
        assert(p02.dealer == self.caller);
        assert(p03.dealer == self.caller);
        assert(p04.dealer == self.caller);
        assert(p05.dealer == self.caller);
        assert(p06.dealer == self.caller);
        assert(p07.dealer == self.caller);
        assert(p00.seats == p01.seats);
        assert(p00.seats == p02.seats);
        assert(p00.seats == p03.seats);
        assert(p00.seats == p04.seats);
        assert(p00.seats == p05.seats);
        assert(p00.seats == p06.seats);
        assert(p00.seats == p07.seats);
        let random_seed: u64 = 0u64;
        random_seed = random_seed.add_wrapped(p00.random_seed);
        random_seed = random_seed.add_wrapped(p01.random_seed);
        random_seed = random_seed.add_wrapped(p02.random_seed);
        random_seed = random_seed.add_wrapped(p03.random_seed);
        random_seed = random_seed.add_wrapped(p04.random_seed);
        random_seed = random_seed.add_wrapped(p05.random_seed);
        random_seed = random_seed.add_wrapped(p06.random_seed);
        random_seed = random_seed.add_wrapped(p07.random_seed);
        let random_seed_hash: field = Poseidon8::hash(random_seed);

        let burn_address: address = aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;
        let seats_occupied: u8 = 0u8;
        let seats_ready: u8 = 0u8;
        if p00.player != burn_address {
            seats_occupied += 1u8;
        }
        if p00.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p01.player != burn_address {
            seats_occupied += 1u8;
        }
        if p01.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p02.player != burn_address {
            seats_occupied += 1u8;
        }
        if p02.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p03.player != burn_address {
            seats_occupied += 1u8;
        }
        if p03.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p04.player != burn_address {
            seats_occupied += 1u8;
        }
        if p04.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p05.player != burn_address {
            seats_occupied += 1u8;
        }
        if p05.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p06.player != burn_address {
            seats_occupied += 1u8;
        }
        if p06.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        if p07.player != burn_address {
            seats_occupied += 1u8;
        }
        if p07.random_seed != 0u64 {
            seats_ready += 1u8;
        }
        assert(seats_occupied <= p00.seats);
        assert(seats_ready <= p00.seats);


        return (CasinoTable {
            owner: p00.owner,
            gates: p00.gates,
            seats: p00.seats,
            seats_occupied,
            seats_ready,
            dealer: p00.dealer,
            player: p00.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p01.owner,
            gates: p01.gates,
            seats: p01.seats,
            seats_occupied,
            seats_ready,
            dealer: p01.dealer,
            player: p01.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p02.owner,
            gates: p02.gates,
            seats: p02.seats,
            seats_occupied,
            seats_ready,
            dealer: p02.dealer,
            player: p02.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p03.owner,
            gates: p03.gates,
            seats: p03.seats,
            seats_occupied,
            seats_ready,
            dealer: p03.dealer,
            player: p03.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p04.owner,
            gates: p04.gates,
            seats: p04.seats,
            seats_occupied,
            seats_ready,
            dealer: p04.dealer,
            player: p04.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p05.owner,
            gates: p05.gates,
            seats: p05.seats,
            seats_occupied,
            seats_ready,
            dealer: p05.dealer,
            player: p05.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p06.owner,
            gates: p06.gates,
            seats: p06.seats,
            seats_occupied,
            seats_ready,
            dealer: p06.dealer,
            player: p06.player,
            random_seed_hash,
            random_seed,
        }, CasinoTable {
            owner: p07.owner,
            gates: p07.gates,
            seats: p07.seats,
            seats_occupied,
            seats_ready,
            dealer: p07.dealer,
            player: p07.player,
            random_seed_hash,
            random_seed,
        });
    }
}
